# -*- coding: utf-8 -*-
"""Major project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19sycFWidNrAKhftrPImf6eBm-1Kh7lAU
"""

!pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("dogs",limit=30,output_dir='images',adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("cats",limit=30,output_dir='images',adult_filter_off=True)

import os
import matplotlib.pyplot as plt
import numpy as np
from skimage.io import imread
from skimage.transform import resize
from tensorflow import keras
from keras.applications.mobilenet_v2 import MobileNetV2
import matplotlib.pyplot as plt
from keras.preprocessing import image


target=[]
images=[]
flat_data=[]

DATADIR = '/content/images'
CATEGORIES = ['dogs','cats']

for category in CATEGORIES:
  class_num=CATEGORIES.index(category)
  path=os.path.join(DATADIR,category)
  #print(path)
  for img in os.listdir(path):
    img_array=imread(os.path.join(path,img))
    #print(img_array)
    #plt.imshow(img_array)
    img_resized=resize(img_array,(150,150,3))
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)
flat_data=np.array(flat_data)
target=np.array(target)
images=np.array(images)

flat_data[0]

target

unique,count=np.unique(target,return_counts=True)
plt.bar(CATEGORIES,count)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(flat_data,target,test_size=0.3,random_state=109)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid=[
            {'C':[1,10,100,1000],'kernel':['linear']},
             {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},
            ] 
            
svc=svm.SVC(probability=True)
clf=GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score,confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

import pickle
pickle.dump(clf,open('img_modle.p','wb'))

model_saving=pickle.load(open('img_modle.p','rb'))

from tensorflow import keras
from keras.applications.mobilenet_v2 import MobileNetV2

model=MobileNetV2()
model

import numpy as np
#x=np.expand_dims(x,axis=0)
#x.shape

from keras.applications.mobilenet_v2 import preprocess_input,decode_predictions

!pip install streamlit --quiet
!pip install pyngrok==4.1.1 --quiet
from pyngrok import ngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from tensorflow import keras
# from keras.applications.mobilenet_v2 import MobileNetV2
# import numpy as np
# from PIL import Image
# import cv2
# from keras.applications.mobilenet_v2 import preprocess_input,decode_predictions
# 
# st.title("Image classifier")
# upload=st.file_uploader('Label = Upload the image')
# model=MobileNetV2()
# file_bytes=np.asarray(bytearray(upload.read()),dtype=np.uint8)
# opencv_image=cv2.imdecode(file_bytes,1)
# opencv_image=cv2.cvtColor(opencv_image,cv2.COLOR_BGR2RGB) # Color from BGR to RGB
# img = Image.open(upload)
# st.image(img,caption='Uploaded Image',width=300)
# model = MobileNetV2()
# x = cv2.resize(opencv_image,(224,224))
# x=np.expand_dims(x,axis=0)
# x=preprocess_input(x)
# y=model.predict(x)
# label=decode_predictions(y)
# st.title(label)

!nohup streamlit run app.py &
url=ngrok.connect(port='8501')
url

